{"ast":null,"code":"import { apiData } from \"./constants\";\n\nclass Api {\n  constructor(options) {\n    this._host = options.host;\n    this._headers = options.headers;\n  }\n\n  getUserInfo() {\n    return fetch(`${this._host}/users/me`, {\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  getInitialCards() {\n    return fetch(`${this._host}/cards`, {\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  editProfileInfo(name, about) {\n    return fetch(`${this._host}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._host}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  likeCard(id) {\n    return fetch(`${this._host}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._host}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._host}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._host}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      ;\n      return Promise.reject(`Ошибка: ${res.status}`);\n    });\n  }\n\n}\n\n;\nexport const api = new Api(apiData);","map":{"version":3,"names":["apiData","Api","constructor","options","_host","host","_headers","headers","getUserInfo","fetch","then","res","ok","json","Promise","reject","status","getInitialCards","editProfileInfo","name","about","method","body","JSON","stringify","addNewCard","link","likeCard","id","dislikeCard","deleteCard","editAvatar","data","avatar","api"],"sources":["C:/Users/Dmitriy/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["import { apiData } from \"./constants\";\r\n\r\nclass Api {\r\n    constructor(options) {\r\n        this._host = options.host;\r\n        this._headers = options.headers;\r\n    };\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._host}/users/me`, {\r\n            headers: this._headers\r\n        })\r\n        .then(res => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        })\r\n    };\r\n\r\n    getInitialCards() {\r\n        return fetch(`${this._host}/cards`, {\r\n            headers: this._headers\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        });\r\n    };\r\n\r\n    editProfileInfo(name, about) {\r\n        return fetch(`${this._host}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: about\r\n            })\r\n        }\r\n        )\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        });\r\n    };\r\n\r\n    addNewCard(name, link) {\r\n        return fetch(`${this._host}/cards`, {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                link: link\r\n            })\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        });\r\n    };\r\n\r\n    likeCard(id) {\r\n        return fetch(`${this._host}/cards/${id}/likes`, {\r\n            method: 'PUT',\r\n            headers: this._headers\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        })\r\n    };\r\n\r\n    dislikeCard(id) {\r\n        return fetch(`${this._host}/cards/${id}/likes`, {\r\n            method: 'DELETE',\r\n            headers:this._headers\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        })\r\n    }\r\n\r\n    deleteCard(id) {\r\n        return fetch(`${this._host}/cards/${id}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        })\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        })\r\n    };\r\n\r\n    editAvatar(data) {\r\n        return fetch(`${this._host}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: data.link\r\n            })\r\n        }\r\n        )\r\n        .then(res => {\r\n            if(res.ok) {\r\n                return res.json();\r\n            };\r\n\r\n            return Promise.reject(`Ошибка: ${res.status}`);\r\n        });\r\n    };\r\n};\r\n\r\nexport const api = new Api(apiData);"],"mappings":"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"},"metadata":{},"sourceType":"module"}